type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: LinkOrderByInput
  ): Feed!
  userfeed(
    filter: String
    skip: Int
    take: Int
    orderBy: UserOrderByInput
  ): UserFeed!
  imagefeed(
    filter: String
    skip: Int
    take: Int
    orderBy: ImageOrderByInput
  ): ImageFeed!
}

type Feed {
  id: ID!
  users: [User!]!
  links: [Link!]!
  count: Int!
}

type UserFeed {
  id: ID!
  users: [User!]!
  count: Int!
}

type ImageFeed {
  id: ID!
  images: [Image!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!, tag: String!): Link!
  postImage(url: String!, description: String!, tag: String!): Image!
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
  newImage: Image
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
  group: Int
  images: [Image!]!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
  tag: String!
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  id: Sort
  description: Sort
  url: Sort
  createdAt: Sort
}

input UserOrderByInput {
  id: Sort
  name: Sort
  email: Sort
}

input ImageOrderByInput {
  id: Sort
  description: Sort
  url: Sort
}

type Image {
  id: ID!
  createdAt:   DateTime!
  description: String!
  url:         String!
  tag:         String!
  postedBy:    User
}

enum Sort {
  asc
  desc
}

scalar DateTime
